install(pwr)
require(pwr)
install.packages(pwr)
install.packages("pwr")
x<-c(1,2,3,4,8)
y<c(4,3,5,7,9)
y <-c(4,3,5,7,9)
model1 <- (lm(y~x))
model1
summary(model1)
anova(model1)
resid(model1)
cov(x,y)
var(x)
plot(y~x)
cov(x,y)
var(x)
abline(model1)
y <-c(4,3,5,7,9,10000000)
model1 <- (lm(y~x))
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
plot(y~x)
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
model1 <- (lm(y~x))
model1
summary(model1)
anova(model1)
resid(model1) # Extract the residuals, or differences between observed and predicted values.
cov(x, y) # Calculate the covariance between 'x' and 'y', showing how they vary together.
var(x) # Calculate the variance of 'x', which measures the spread of 'x' values.
plot(y~x)
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
x <-c(1,2,3,4,8,1)
y <-c(4,3,5,7,9,10000000)
model1 <- (lm(y~x))
model1
summary(model1)
anova(model1)
resid(model1) # Extract the residuals, or differences between observed and predicted values.
cov(x, y) # Calculate the covariance between 'x' and 'y', showing how they vary together.
var(x) # Calculate the variance of 'x', which measures the spread of 'x' values.
plot(y~x)
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
y <-c(4,3,5,7,9,4)
model1 <- (lm(y~x))
model1
summary(model1)
anova(model1)
resid(model1) # Extract the residuals, or differences between observed and predicted values.
cov(x, y) # Calculate the covariance between 'x' and 'y', showing how they vary together.
var(x) # Calculate the variance of 'x', which measures the spread of 'x' values.
plot(y~x)
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
model1 <- lm(log(y)~log(x))
model1
summary(model1)
anova(model1)
resid(model1) # Extract the residuals, or differences between observed and predicted values.
cov(x, y) # Calculate the covariance between 'x' and 'y', showing how they vary together.
var(x) # Calculate the variance of 'x', which measures the spread of 'x' values.
plot(y~x)
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
x <-c(1,2,3,4,8,1,1)
y <-c(4,3,5,7,9,4,1000000)
model1 <- lm(log(y)~log(x))
model1
summary(model1)
anova(model1)
resid(model1) # Extract the residuals, or differences between observed and predicted values.
cov(x, y) # Calculate the covariance between 'x' and 'y', showing how they vary together.
var(x) # Calculate the variance of 'x', which measures the spread of 'x' values.
plot(y~x)
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
x <-c(1,2,3,4,8,1,1)
y <-c(4,3,5,7,9,4,5)
model1 <- lm(y~x)
model1
summary(model1)
anova(model1)
resid(model1) # Extract the residuals, or differences between observed and predicted values.
cov(x, y) # Calculate the covariance between 'x' and 'y', showing how they vary together.
var(x) # Calculate the variance of 'x', which measures the spread of 'x' values.
plot(y~x)
abline(model1)    # Adds the regression line from 'model1' to an existing plot of 'y' vs 'x'.
rm(list=ls())
require(WebPower)
install.package("webpower")
require(WebPower)
install.package("WebPower")
require(WebPower)
Install.Package("WebPower")
require(WebPower)
install.packages("WebPower")
require(WebPower)
require(WebPower)
?WebPower
y<-rnorm(51, mean=1, sd=1.3)
x<-seq(from=0, to=5, by=0.1)
y<-rnorm(51, mean=1, sd=1.3)
x<-seq(from=0, to=5, by=0.1)
plot(hist(y, breaks=10))
mean(y)
sd(y)
segments(x0=(mean(y)), y0=(0), x1=(mean(y)), y1=40, lty=1, col="blue")
rm(list=ls())
require(WebPower)
?webpower
?WebPower
y<-rnorm(51, mean=1, sd=1.3)
x<-seq(from=0, to=5, by=0.1)
length(x)
plot(hist(y, breaks=10))
mean(y)
sd(y)
segments(x0=(mean(y)), y0=(0), x1=(mean(y)), y1=40, lty=1, col="blue")
# and now 0.25 sd left of the mean (because females are larger)
segments(x0=(mean(y)+0.25*sd(y)), y0=(0), x1=(mean(y)+0.25*sd(y)), y1=40, lty
=1, col="red")
?wp.t
wp.t(d=0.25, power=0.8, type="two.sample", alternative="two.sided")
#a power curve could be used?
res.1<-wp.t(n1=seq(20,300,20), n2=seq(20,300,20), d=0.25, type="two.sample.2n
", alternative="two.sided")
res.1
#a power curve could be used?
res.1<-wp.t(n1=seq(20,300,20), n2=seq(20,300,20), d=0.25, type="two.sample.2n
", alternative="two.sided")
res.1
#a power curve could be used?
res.1<-wp.t(n1=seq(20,300,20), n2=seq(20,300,20), d=0.25, type="two.sample.2n
", alternative="two.sided")
#a power curve could be used?
res.1<-wp.t(n1=seq(20,300,20), n2=seq(20,300,20), d=0.25, type="two.sample
", alternative="two.sided")
#a power curve could be used?
res.1<-wp.t(n1=seq(20,300,20), n2=seq(20,300,20), d=0.25, type="two.sample", alternative="two.sided")
res.1
wp.t(d=0.25, power=0.8, type="two.sample", alternative="two.sided") #default two sided test needs to be run because not enough data
plot(res.1, xvar='n1', yvar='power')
plot(res.1, xvar='n1', yvar='power')
plot(res.1, xvar='n1', yvar='n2')
plot(res.1, xvar='n1', yvar='n2')
plot(res.1)
rm(list=ls())
x<-seq(from = -5, to = 5, by = 1)
x
## [1] 3
x[[length(x)]]
x<-seq(from = -5, to = 5, by = 1)
x
a<-2 #intercept
b<-1 #slope
y<-a+b*x
plot(x,y)
segments(0,-10,0,10, lty=3) #add axes
segments(-10,0,10,0,lty=3)
plot(x,y)
segments(0,-10,0,10, lty=3) #add axes
segments(-10,0,10,0,lty=3)
?abline
plot(x,y, col="white")
segments(0,-10,0,10, lty=3)
segments(-10,0,10,0,lty=3)
abline(a = 2, b=1)
plot(x,y, col="green")
segments(0,-10,0,10, lty=3)
segments(-10,0,10,0,lty=3)
plot(x,y, col="black")
segments(0,-10,0,10, lty=3)
segments(-10,0,10,0,lty=3)
abline(a = 2, b=1)
points(4,0, col="red", pch=19)
points(-2,6, col="green", pch=9)
points(x,y, pch=c(1,2,3,4,5,6,7,8,9,10,11))
y<-x^2
plot(x,y)
segments(0,-30,0,30, lty=3)
segments(-30,0,30,0,lty=3)
segments(0,-40,0,30, lty=3)
segments(-30,0,30,0,lty=3)
segments(-30,20,30,0,lty=3)
segments(-30,0,30,0,lty=3)
segments(-30,0,30,0,lty=3)
y<-x^2
plot(x,y)
segments(-30,0,30,0,lty=3)
segments(-30,0,30,0,lty=3)
segments(-30,0,30,0,lty=3) #starts at point -30, 0 and ends at point 30, 0
segments(-30,0,30,0,lty=3)
segments(0,-30,0,30, lty=3)
segments(0,-30,0,30, lty=3)
segments(-30,0,30,0,lty=3) #starts at point -30, 0 and ends at point 30, 0
segments(0,-30,0,30, lty=3)
segments(0,-5,0,30, lty=3)
segments(0,-5,0,5, lty=3)
segments(0,-5,0,3, lty=3)
segments(0,-3,0,3, lty=3)
y<-x^2
plot(x,y)
segments(-30,0,30,0,lty=3) #starts at point -30, 0 and ends at point 30, 0
segments(0,-3,0,3, lty=3)
y<-x^2
plot(x,y)
segments(-30,0,30,0,lty=3) #starts at point -30, 0 and ends at point 30, 0
segments(0,-3,0,3, lty=3)
segments(0,-30,0,30, lty=3)
y<-x^2
plot(x,y)
segments(-3,0,3,0,lty=3) #starts at point -30, 0 and ends at point 30, 0
segments(0,-30,0,30, lty=3)
segments(-30,0,30,0,lty=3) #starts at point -30, 0 and ends at point 30, 0
segments(0,-30,0,30, lty=3)
#give linear function intercept of a-2
x<-seq(from = -5, to = 5, by = 0.1)
a<- -2
y<-a+x^2
plot(x,y)
segments(0,-30,0,30, lty=3)
segments(-30,0,30,0,lty=3)
plot(x,y)
a<- -2
b<-3
y<-a+b*x^2
points(x,y, pch=19, col="red")
segments(0,-30,0,30, lty=3)
segments(-30,0,30,0,lty=3)
y<-a+b*x^2 #gave the curve a higher slope
points(x,y, pch=19, col="red")
segments(0,-30,0,30, lty=3)
segments(-30,0,30,0,lty=3)
plot(x,y)
a<- -2
b1<- 10
b2<-3
y<-a+b1*x+b2*x^2
points(x,y, pch=19, col="green")
segments(0,-100,0,100, lty=3)
segments(-100,0,100,0,lty=3)
plot(x,y)
a<- 1
b1<- 2
b2<-0.15
y<-a+b1*x+b2*x^2
points(x,y, pch=19, col="green")
segments(0,-100,0,100, lty=3)
segments(-100,0,100,0,lty=3)
plot(x,y)
a<- 1
b1<- 2
b2<-0.15
y<-a+b1*x+b2*x^2
points(x,y, pch=19, col="green")
segments(0,-100,0,100, lty=3)
segments(0,-1000,0,1000, lty=3)
segments(-1000,0,1000,0,lty=3)
y<-a+b1*x+b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
segments(-1000,0,1000,0,lty=3)
a<- -1
b1<- 2
b2<-0.15
y<-a+b1*x+b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
plot(x,y)
a<- -1
b1<- 2
b2<-0.15
y<-a+b1*x+b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
segments(-1000,0,1000,0,lty=3)
plot(x,y)
a<- -1
b1<- 2
b2<-0.15
y<-a+b1*x-b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
plot(x,y)
a<- -1
b1<- 2
b2<-0.15
y<-a+b1*x-b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
segments(-1000,0,1000,0,lty=3)
plot(x, y, type="n", xlim=c(-100, 100), ylim=c(-1000, 1000), main="Plot with Adjusted Scales")
a<- -1
b1<- 2
b2<-0.15
y<-a+b1*x-b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
segments(-1000,0,1000,0,lty=3)
segments(-1000,0,1000,0,lty=3)
max_y_index <- which.max(y)  # Find the index of the maximum y value
highest_x <- x[max_y_index]  # Get the corresponding x value
highest_y <- y[max_y_index]  # Get the highest y value# Find the index of the maximum y value
points(highest_x, highest_y, col="red", pch=19)
x<-seq(from = -100, to = 100, by = 1)
plot(x, y, type="n", xlim=c(-100, 100), ylim=c(-1000, 1000), main="Plot with Adjusted Scales")
a<- -1
b1<- 2
b2<-0.15
y<-a+b1*x-b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
segments(-1000,0,1000,0,lty=3)
max_y_index <- which.max(y)  # Find the index of the maximum y value
highest_x <- x[max_y_index]  # Get the corresponding x value
highest_y <- y[max_y_index]  # Get the highest y value# Find the index of the maximum y value
points(highest_x, highest_y, col="red", pch=19)
text(highest_x, highest_y, labels=paste("Max y =", round(highest_y, 2)), pos=3)
#find highest y point in equation
x<-seq(from = -100, to = 100, by = 1)
plot(x, y, type="n", xlim=c(-100, 100), ylim=c(-1000, 1000), main="Plot with Adjusted Scales")
a<- -1
b1<- 2
b2<-0.15
y<-a+b1*x-b2*x^2
points(x,y, pch=19, col="green")
segments(0,-1000,0,1000, lty=3)
segments(-1000,0,1000,0,lty=3)
max_y_index <- which.max(y)  # Find the index of the maximum y value
highest_x <- x[max_y_index]  # Get the corresponding x value
highest_y <- y[max_y_index]  # Get the highest y value# Find the index of the maximum y value
points(highest_x, highest_y, col="red", pch=19)
text(highest_x, highest_y, labels=paste("Max y =", round(highest_y, 2)), pos=3) # pos=3 places the text above the point for better visibility
residuals_lmm <- resid(mixed_model)
# 5. Check Normality of Random Effects
# Q-Q plot for random effects
qqnorm(ranef(mixed_model)$SPlocation[, 1], main = "Q-Q Plot of Random Effects (SPlocation)")
# 5. Check Normality of Random Effects
# Q-Q plot for random effects
qqnorm(ranef(mixed_model)$SPlocation[, 1], main = "Q-Q Plot of Random Effects (SPlocation)")
qqline(ranef(mixed_model)$SPlocation[, 1])
library(tseries)
library(nortest)
require(ggplot2)
library(lme4)
require(ggeffects)
library(car)
require(usdm)
require(psych)
require(lmerTest)
require(sjPlot)
# 5. Check Normality of Random Effects
# Q-Q plot for random effects
qqnorm(ranef(mixed_model)$SPlocation[, 1], main = "Q-Q Plot of Random Effects (SPlocation)")
qqline(ranef(mixed_model)$SPlocation[, 1])
# Fit a mixed-effects model  (TREEID REMOVED AS A RANDOM EFFECT AS NOT ENOUGH SAMPLES FOR VARIABILITY)
mixed_model <- lmer(JulianDay ~ Girth_cm + DateRange + (1 | SPlocation),
data = budburst)
budburst <-read.csv("../data/stratifiedgirthdata.csv")
setwd("~/Documents/statistics in R /ASSESSMENT/code")
budburst <-read.csv("../data/stratifiedgirthdata.csv")
# Fit a mixed-effects model  (TREEID REMOVED AS A RANDOM EFFECT AS NOT ENOUGH SAMPLES FOR VARIABILITY)
mixed_model <- lmer(JulianDay ~ Girth_cm + DateRange + (1 | SPlocation),
data = budburst)
# 5. Check Normality of Random Effects
# Q-Q plot for random effects
qqnorm(ranef(mixed_model)$SPlocation[, 1], main = "Q-Q Plot of Random Effects (SPlocation)")
qqline(ranef(mixed_model)$SPlocation[, 1])
residuals_lmm <- resid(mixed_model)
shapiro.test(residuals_lmm)
ad.test(residuals_lmm)
jarque.bera.test(residuals_lmm)
# Customize the plot with modified legend labels
plot(ggpredict(mixed_model, terms = c("Girth_cm", "DateRange")),
show_data = TRUE,
colors = c("#006400", "red")) +  # Dark green and red colors
geom_jitter(width = 5, height = 0.5, alpha = 0.4) +  # Adding jitter with some transparency
scale_fill_manual(values = c("green", "red")) +  # Light green and pink for confidence interval fill
theme_minimal() +  # Cleaner and more modern theme
theme(
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
labs(
x = "Tree Girth (cm)",
y = "Julian Days until Budburst in trees"
) +
ggtitle("") +
scale_color_manual(
values = c("#006400", "red"),  # Ensure colors are defined
labels = c("2007-2015", "2016-2018")  # Custom legend labels
)
