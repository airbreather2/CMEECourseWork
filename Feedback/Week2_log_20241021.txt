Starting code feedback for Sebastian, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.65 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, Feedback, week1, week3, .git

Found the following files in parent directory: .gitignore, .Rhistory, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework Repository

**Author:** Sebastian Dohne  
**Email:** [sed24@ic.ac.uk](mailto:sed24@ic.ac.uk)  
**Course:** MSc CMEE 

## Overview

This repository contains all materials related to my coursework for the CMEE course. It is organized by weeks, with each week divided into specific folders for better navigation and clarity.

## Folder Structure

Each Content from week is organized into the following folders:

- **code/**: Contains all the scripts and code used per week. a short summary of their functions are listed and input and output examples are given. 
- **data/**: Includes data utilized in the coursework.
- **results/**: Contains output files from /code.
- **sandbox/**: A space for experimentation.


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: data, sandbox, Results, code

Found the following files: .Rhistory, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************

# Week2

### Week 2 contains content from the: Biological computing in python 1 chapter

#### code used: 

-python

## Files and folders in code/: 

### [align_seq.py]

This script reads two DNA sequences from an input CSV file, aligns them using a custom scoring function, and saves the best alignment along with its score to an output text file.

**Input:** CSV file with 2 DNA sequences (../data/test_seqs/seq1.csv)  
**Output:** Text file with the best alignment and score

### [basic.csv.py]

This script demonstrates how to read from and write to CSV files using the `csv` module in Python. It reads species data from a CSV file, prints species information, and writes specific columns (species name and body mass) to a new CSV file.

**Input:** `../data/testcsv.csv` (CSV file with species data)  
**Output:** `../data/bodymass.csv` (CSV file with species name and body mass)

### [basic_io1.py]

This script demonstrates how to read from a file in Python. It reads and prints each line of a file, while skipping and ignoring blank lines. The script shows both manual file opening/closing and using the `with` statement for automatic file closure.

**Input:** `../sandbox/test.txt` (Text file with content to read)  
**Output:** None (prints content to console

### [basic_io2.py]

This script demonstrates how to write data to a file in Python. It saves the elements of a list (range 0 to 99) to a text file, with each element written on a new line.

**Input:** None  
**Output:** `../sandbox/testout.txt` (Text file containing numbers from 0 to 99, each on a new line)

### [basic_io3.py]

This script demonstrates how to store and retrieve Python objects using the `pickle` module. It saves a dictionary to a file using `pickle` and then loads the dictionary back from the file for further use.

**Input:** None  
**Output:** `../sandbox/testp.p` (Binary file storing the pickled dictionary)


### [boilerplate.py]

This is a basic boilerplate script for Python programs. It demonstrates how to structure a Python script with a main entry point, import modules, and handle command-line arguments. The script prints a simple message and exits with a status code.

**Input:** Command-line arguments (if any)
**Output:** None (prints "This is a boilerplate" to the console)

### [cfexercises1.py]

This program provides various mathematical utility functions, including:
- Calculating the square root of a number.
- Finding the maximum of two numbers.
- Sorting three numbers in ascending order.
- Calculating the factorial of a number using three methods: iteratively, recursively, and with a while loop.

**Input:** Function arguments passed within the script or through the command line.  
**Output:** Prints results of the mathematical operations to the console.

### [cfexercises2.py]

This script demonstrates several functions that print "hello" based on different conditions using for loops and while loops. Each function implements unique logic for when and how "hello" is printed.

**Input:** Various function arguments passed within the script.  
**Output:** Prints "hello" to the console based on the conditions defined in each function.

### [controlflow.py]

This script provides several functions demonstrating the use of control statements in Python. It includes:
- Determining whether a number is even or odd.
- Finding the largest divisor of a number from 2, 3, 4, or 5.
- Checking if a number is prime.
- Finding all prime numbers up to a given number.

**Input:** Function arguments passed within the script.  
**Output:** Prints results (e.g., even/odd status, largest divisor, prime checks, list of primes) to the console.

### [debugme.py]

This script contains a function `buggyfunc` that attempts to perform division in a loop, catching errors such as division by zero. It demonstrates the use of try-except blocks for error handling in Python and prints the progress and errors encountered during execution.

**Input:** Integer passed to the `buggyfunc` function.  
**Output:** Prints the result of the division, along with any errors encountered (e.g., division by zero).


### [dictionary.py]

This script demonstrates how to populate a dictionary that maps taxonomic order names to sets of species (taxa). It uses both conventional loops and list comprehensions to achieve this and prints the resulting dictionary to the screen.

**Input:** A list of tuples containing species and their taxonomic order.  
**Output:** Prints a dictionary that maps each order to its respective species.

### [handlingcsvs.py]

This script reads species data from a CSV file and prints the species name along with other details. It then writes a new CSV file that contains only the species name and body mass.

**Input:** `../data/testcsv.csv` (CSV file with species data)  
**Output:** `../data/bodymass.csv` (CSV file containing species names and body mass)

### [lc1.py]

This script demonstrates the use of list comprehensions and conventional loops to extract specific information from a tuple of bird species. It performs the following:
- Creates lists of latin names, common names, and body masses using list comprehensions.
- Recreates the same lists using conventional loops.

**Input:** A tuple containing bird species data (latin name, common name, and body mass).  
**Output:** Prints lists of latin names, common names, and body masses to the console.

### [lc1.py]

This script analyzes the average UK rainfall for the year 1910 by month, using both list comprehensions and conventional loops. It performs the following tasks:
- Creates a list of month and rainfall tuples where rainfall exceeds 100 mm.
- Creates a list of month names where rainfall is less than 50 mm.
- Recreates both tasks using conventional loops.

**Input:** A list of tuple in the script containing monthly rainfall data for 1910 (month and rainfall amount).  
**Output:** Prints lists of months with

### [loops.py]

This script demonstrates basic examples of using loops in Python. It includes:
- A `FOR` loop to iterate over a range of numbers.
- A `FOR` loop to iterate over a list of mixed data types.
- A `FOR` loop that sums values in a list.
- A `WHILE` loop that increments a variable until a condition is met.

**Input:** Hardcoded values and lists within the script.  
**Output:** Prints numbers, list elements, and running totals to the console.

### [MyExampleScript.py]

This script demonstrates a simple function `foo` that multiplies a number by itself and prints the result. It also includes instructions on how to run the script using different Python interpreters in the terminal.

**Input:** An integer passed to the `foo` function within the script.  
**Output:** Prints the result of the multiplication to the console.

### [Oaks_debugme.py]

This script filters species names in a CSV file to identify those belonging to the *Quercus* genus (oak trees) and writes them to a new CSV file. It reads from an input file, processes the data, and saves the results to an output file. Additionally, the script includes a function with built-in tests using `doctest`.

**Input:** `../data/TestOaksData.csv` (CSV file containing species data)  
**Output:** `../Results/JustOaksData.csv` (CSV file containing only *Quercus* species)

### [oaks.py]

This script identifies oak species (those that start with 'Quercus ') from a given list of taxa using both for loops and list comprehensions. It also prints the oak species names in uppercase using both methods.

**Input:** A list of species names (`taxa` in code).  
**Output:** Prints oak species names and their uppercase versions to the console.

### [open.py]

This script demonstrates how to read from a text file in Python using a `with` statement. It includes examples of reading all lines from the file and skipping blank lines during the process.

**Input:**  Any txt file: `../sandbox/test.txt` (Text file used in this example)
**Output:** Prints each line from the file to the console, with the option to skip blank lines.

### [sysargv.py]

This script demonstrates the usage of `sys.argv`, which is used to access command-line arguments in Python. It prints:
- The name of the script.
- The number of arguments passed to the script.
- The list of arguments themselves.

**Input:** Command-line arguments passed when running the script.  
**Output:** Prints the script name, number of arguments, and the arguments themselves to the console.

### [test_control_flow.py]

This script demonstrates the use of control statements by determining whether a number is even or odd. It includes built-in tests using the `doctest` module to validate the functionality of the `even_or_odd` function.

**Input:** A number passed to the `even_or_odd` function within the script or through doctest.  
**Output:** Prints whether the number is even or odd, and returns test results when run with doctest.

### [tuple.py]

This script processes a tuple of bird species, each containing the Latin name, common name, and mass. It outputs each species' information on a separate line in a readable format, including the Latin name, common name, and mass.

**Input:** A tuple containing bird species data (Latin name, common name, and mass).  
**Output:** Prints each species' information (Latin name, common name, and mass) on a separate line.

### [using_name.py]

This script demonstrates how the `__name__` variable works in Python. It checks whether the script is being run directly or imported as a module and prints an appropriate message based on that. It also displays the module's name.

**Input:** None  
**Output:** Prints whether the script is being run directly or imported, along with the module's name.


# Data
This folder contains data mentioned for input in the above scripts: 

# Results
This folder contains the outputs of the above scripts, specifically: 

- oaks_debugme.py
- align_seq.py

# Sandbox
this is the sandbox area, it contains files used for experimentation: 

additionally it contains py_guides, which contains python files used for learning purposes






**********************************************************************

Found following files in results directory: JustOaksData.csv, Best-alignment-Results.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.0

Found 23 code files: basic_io1.py, boilerplate.py, basic_io3.py, basic_io2.py, loops.py, oaks_debugme.py, lc1.py, controlflow.py, handingcsvs.py, lc2.py, sysargv.py, open.py, oaks.py, test_control_flow.py, tuple.py, align_seqs.py, cfexercises2.py, cfexercises1.py, dictionary.py, basic_cvs.py, debugme.py, MyExampleScript.py, using_name.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates how to read from a file using Python. 
It includes:
- Reading and printing each line of a file.
- Skipping and ignoring blank lines when printing the content of a file.
- Using both manual file opening and the `with` statement for automatic file closure.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.2
License: License for this code/program
"""

__appname__ = '[basic_io1.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.2'
__license__ = "License for this code/program"

#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0: #gets rid of empty lines: returns length of string after it has been stripped of white spaces 
        print(line)


#############################
# FILE INPUT
#############################
# Open a file for reading
with open('../sandbox/test.txt', 'r') as s:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in s:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as l:
    for line in l:
        if len(line.strip()) > 0:
            print(line)
            
f.close()#ensure the file is closed, data saved correctly and no longer used by programme 


**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line



First Line

Second Line

Third Line

Fourth Line

First Line

Second Line



Third Line



Fourth Line



First Line

Second Line

Third Line

Fourth Line


**********************************************************************

Code ran without errors

Time consumed = 0.02904s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3 
#the above shebang specifies the location to the python executable that the rest of the script needs to be interpreted with

"""Description of this program or application.
You can use several lines""" #docstrings allow you to describe an operation of the script or a function/module within it

__appname__ = '[boilerplate.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)
#sys.exit(status)
#this is how to terminate the python programme in an explicit manner returning an status code


    #This is the main function. Arguments obtained in the if (__name__ == "__main__"): part of the script are “fed” to 
    #this main function where the printing of the line “This is a boilerplate” happens.



**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.02313s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates how to store and retrieve Python objects 
using the `pickle` module. It includes:
- Saving a dictionary to a file using `pickle`.
- Loading the dictionary back from the file for further use.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[basic_io3.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)



**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.03056s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************

#!/usr/bin/env python3

"""
Description: This script demonstrates how to write data to a file in Python. 
It includes:
- Saving the elements of a list (range 0 to 99) to a text file.
- Writing each element on a new line in the output file.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[basic_io2.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w') #w stands for write mode, if file exists, contents will be overwritten, if not, contents created 
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end
#this tring of text created a txt file goin from 0 to 99 where each number is written on a new line
f.close() #ensure the file is closed, data saved correctly and no longer used by programme
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02429s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates basic examples of using loops in Python. 
It includes:
- A FOR loop to iterate over a range of numbers.
- A FOR loop to iterate over a list of mixed data types.
- A FOR loop that sums values in a list.
- A WHILE loop that increments a variable until a condition is met.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""
__appname__ = '[loops.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

# Simple for loop that iterates over a range of numbers from 0 to 4
for i in range(5):
    print(i)  # Prints each number in the range

# Iterating over elements in a list of mixed data types
my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)  # Prints each element in the list `my_list`

# Summing values in a list
total = 0  # Initialize total to 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s  # Add each element in `summands` to `total`
    print(total)       # Print the running total after each addition

# WHILE loop

# Loop that increments `z` until it reaches 100
z = 0  # Initialize z to 0
while z < 100:
    z = z + 1  # Increment z by 1 in each iteration
    print(z)   # Print the value of z each time




**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.02527s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
"""
Description: This script filters species names in a CSV file, identifying those 
belonging to the Quercus genus (oak trees), and writes them to a new CSV file. 
It reads from an input file, processes the data, and saves the results to an output file.
Additionally, it includes a function with built-in tests using doctest.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = 'oaks_debugme.py'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"



import csv
import sys
import doctest


def is_an_oak(name):
    """ 
    Returns True if the name starts with 'quercus or Quercus'  

    Examples:
    >>> is_an_oak('Fagus sylvatica') 
    False

    >>> is_an_oak('Quercus sylvatica')
    True

    >>> is_an_oak('Quercuss sylvatica') 
    False
    """
    return name.split()[0] in ('quercus', 'Quercus') 

#print(str(is_an_oak('Quercuss sylvatica')) + " test complete" + '\n')
#gives false


    
def main(argv): 
    f = open('../data/TestOaksData.csv','r')
    g = open('../Results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    
    next(taxa) #skips 'genus' and 'species' headers
    
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    
    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
 

doctest.testmod()
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.06369s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates the use of list comprehensions and loops 
to extract specific information from a tuple of bird species. The script performs the following:
- Creates lists of latin names, common names, and body masses using list comprehensions.
- Recreates the same lists using conventional loops.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[lc1.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

# Tuple containing information about birds: latin name, common name, and mean body mass (in grams)

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. The if z > my_best_score condition means that when a new alignment has the same score as the current one, 
# the current one will be kept and the new one discarded. As a result, multiple alignments with the same score will be lost even if they are 
# all equally good alignments (highly likely in longer sequences), with only the first one retained.


latin_names = [i[0] for i in birds]
print(latin_names)

common_names = [i[1] for i in birds]
print(common_names)

body_mass = [i[2] for i in birds]
print(body_mass)


# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). latin_names = [i for i[0] in birds]

latin_names = []
for i in birds: # implicit loop
    latin_names.append(i[0])
print(latin_names)

common_names = []
for i in birds: 
    common_names.append(i[1])
print(common_names)

body_mass = []
for i in birds: 
    body_mass.append(i[2])
print(body_mass)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.02442s

======================================================================
Inspecting script file controlflow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor") 
            return False
    print(f"{x} is a prime!")
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing controlflow.py...

controlflow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.02296s

======================================================================
Inspecting script file handingcsvs.py...

File contents are:

**********************************************************************
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

**********************************************************************

Testing handingcsvs.py...

handingcsvs.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.03081s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script analyzes the average UK rainfall for the year 1910 by month, 
using both list comprehensions and conventional loops. It performs the following tasks:
- Creates a list of month and rainfall tuples where rainfall exceeds 100 mm.
- Creates a list of month names where rainfall is less than 50 mm.
- Recreates both tasks using conventional loops.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[lc2.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"


# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

over_100 = [(i[0], i[1]) for i in rainfall if i[1] > 100] # list of tuples is created  for every element of rainfall where the the second element in each tuple is over 100
print(over_100)


# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

under_50 = [i[0] for i in rainfall if i[1] < 50]
print(under_50)


# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

over_100 = []
for i in rainfall:
    if i[1] > 100:
        over_100.append((i[0], i[1]))
print(over_100)

under_50 = []
for i in rainfall:
    if i[1] < 50:
        under_50.append(i[0])
print(under_50)

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.02439s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates the usage of `sys.argv`, which is used to 
access command-line arguments in Python. It prints:
- The name of the script.
- The number of arguments passed to the script.
- The list of arguments themselves.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""
__appname__ = '[sysargv.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"


#argv is the argument variable it is the variable that holds the arguments you pass to your Python script
#when you run it like $var in shell scripts
#sys.argv is an object created by the sys module that contains the names of the argument variables in the current script

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))

#run sysargv.py
#Output: 
#This is the name of the script:  sysargv.py
#Number of arguments:  1
#The arguments are:  ['sysargv.py']

#run sysargv.py var1 var2
#Output: 
#This is the name of the script:  sysargv.py
#Number of arguments:  3
#The arguments are:  ['sysargv.py', 'var1','var2']

#run sysargv.py 1 2 var37
#This is the name of the script:  sysargv.py
#Number of arguments:  4
#The arguments are:  ['sysargv.py', '1', '2', 'var3']


**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.02147s

======================================================================
Inspecting script file open.py...

File contents are:

**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed. With automatically safely closes the file, removes the need for f.close()

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)

**********************************************************************

Testing open.py...

open.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 94.0

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line



First Line

Second Line

Third Line

Fourth Line


**********************************************************************

Code ran without errors

Time consumed = 0.02231s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script identifies oak species (those that start with 'Quercus ') 
from a given list of taxa using both for loops and list comprehensions. 
Additionally, it prints the oak species names in uppercase using both methods.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[oaks.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"



## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    
    """
    Returns True if the given species name starts with 'quercus ' (case-insensitive).
    
    Parameters:
    name (str): The species name to check.

    Returns:
    bool: True if the name starts with 'quercus ', otherwise False.
    """
    
    return name.lower().startswith('quercus ')


##Using for loops
oaks_loops = set()
for species in taxa: # iterates over each species in taxa 
    if is_an_oak(species): #if identified as oak by function above 
        oaks_loops.add(species) #is added to oaks.loop set 
print(oaks_loops) 

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)]) #expression (what u want to include in list) for item in iterable (iterates over each item in list) if condition is met
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 94.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus petraea', 'Quercus robur', 'Quercus cerris'}
{'Quercus petraea', 'Quercus robur', 'Quercus cerris'}
{'QUERCUS CERRIS', 'QUERCUS ROBUR', 'QUERCUS PETRAEA'}
{'QUERCUS CERRIS', 'QUERCUS ROBUR', 'QUERCUS PETRAEA'}

**********************************************************************

Code ran without errors

Time consumed = 0.02236s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
        
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd!"

def main(argv): 
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()   # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.06605s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script processes a tuple of bird species, each containing the Latin name, 
common name, and mass. It outputs each species' information on a separate line in a 
readable format, including the Latin name, common name, and mass.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[tuple.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"


birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
#   
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

output  = []
for species, name, mass in birds:
    output.append(" Latin name: " + species + " Common name: " + name + " Mass: " + str(mass))
print(output)


**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
[' Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7', ' Latin name: Delichon urbica Common name: House martin Mass: 19', ' Latin name: Junco phaeonotus Common name: Yellow-eyed junco Mass: 19.5', ' Latin name: Junco hyemalis Common name: Dark-eyed junco Mass: 19.6', ' Latin name: Tachycineata bicolor Common name: Tree swallow Mass: 20.2']

**********************************************************************

Code ran without errors

Time consumed = 0.02305s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script compares two DNA sequences from a CSV file, aligns them, and calculates 
the best alignment based on the number of matching bases. It uses a scoring function to determine
the best match and saves the alignment result along with the score to a text file.

The script includes:
- Reading DNA sequences from a CSV file.
- Calculating the best alignment using a custom scoring function.
- Saving the best alignment and score to a text file.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""
__appname__ = '[align_seq.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

import ipdb
import csv
import sys

def load_sequence(filename):
    """
    Loads two DNA sequences from a CSV file.

    This function checks if the provided filename ends with '.csv' and attempts to read 
    the sequences from the specified CSV file. It expects the CSV file to contain two 
    sequences in the first two columns of the file. The first row is treated as a header 
    and is skipped during the reading process.

    Args:
        filename (str): The path to the CSV file containing the DNA sequences.

    Returns:
        tuple: A tuple containing two strings:
            - The first string is the concatenated sequence from the first column.
            - The second string is the concatenated sequence from the second column.
            
        If the file is not found or is not a CSV file, returns (None, None).
    """
    if not filename.lower().endswith('.csv'):
        print("Error: The file is not a CSV file. Please provide a .csv file.")
        return None, None
    
    sequence = ""  # Will store sequence 1
    sequence2 = "" # Will store sequence 2
    try:
        with open(filename, newline='') as f:  # Ensure no blank rows between DNA sequences
            reader = csv.reader(f)
            next(reader)  # Skip the header row
            for row in reader:
                sequence += row[0]  # Concatenate each nucleotide of sequence 1
                sequence2 += row[1] # Concatenate each nucleotide of sequence 2
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        return None, None
    
    return sequence, sequence2

file_path = input("Enter the file path for the sequence CSV file: ") # code that saves inputed csv file in terminal as variable
seqs = load_sequence(file_path) #to be run in the function
seq1 = seqs[0]
seq2 = seqs[1]

#seq2 = load_sequence('seq2.csv')

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths


#ipdb.set_trace()

def calculate_score(s1, s2, l1, l2, startpoint):
    """
    Computes the alignment score by counting the number of matching bases 
    between two DNA sequences starting from a specified point.

    Args:
        s1 (str): The first DNA sequence (the longer sequence).
        s2 (str): The second DNA sequence (the shorter sequence).
        l1 (int): The length of the first DNA sequence.
        l2 (int): The length of the second DNA sequence.
        startpoint (int): The starting index in the first sequence for the alignment.

    Returns:
        int: The total score representing the number of matching bases found during the alignment.
    
    This function prints a visual representation of the alignment, where 
    '*' indicates a match and '-' indicates a mismatch.
    """
    matched = ""  # Holds the alignment representation
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:  # Check within bounds of the first sequence
            if s1[i + startpoint] == s2[i]:  # If the bases match
                matched += "*"  # Append '*' for a match
                score += 1  # Increment score
            else:
                matched += "-"  # Append '-' for a mismatch

    # Print formatted output
    print("." * startpoint + matched)  # Align matched sequence
    print("." * startpoint + s2)  # Print second sequence
    print(s1)  # Print first DNA sequence
    print(score)  # Print match score
    print(" ")  # Blank line for spacing

    return score  # Return the total score



# Test the function with some example starting points:
#calculate_score(s1, s2, l1, l2, 0)
#calculate_score(s1, s2, l1, l2, 1)
#calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1 #makes sure value is properley updated even if lower than 0 

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # creates visual respresentation of best alignment 
        my_best_score = z 

# Print the final results after finding the best alignment
 
    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)


def save_to_text(file_path, best_alignment, s1, best_score):
    """
    Saves the best alignment and score to a specified text file.

    Args:
        file_path (str): The path to the output text file.
        best_alignment (str): The best alignment of the two sequences.
        s1 (str): The longer DNA sequence involved in the best alignment.
        best_score (int): The score of the best alignment.
    
    This function writes the best alignment, the associated DNA sequence,
    and the best score to the specified file. It prints a confirmation message
    once the results are saved.
    """
    with open(file_path, 'w') as outfile: 
        outfile.write("Best Alignment:\n")
        outfile.write(best_alignment + "\n")
        outfile.write(s1 + "\n")
        outfile.write(f"Best Score: {best_score}\n")
    print(f"Results saved to {file_path}")
    
file_path = "../../Results/Best-alignment-Results.txt"
save_to_text(file_path, my_best_align, s1, my_best_score)


# saves output to txt file


**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/SebastianDohne_sed24/week2/code/align_seqs.py", line 22, in <module>
    import ipdb
ModuleNotFoundError: No module named 'ipdb'

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates several functions that print "hello" 
based on different conditions using for loops and while loops.
"""

__appname__ = '[cfexercises2.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

######################## 
# For every value from 1 - 12, if the value is divisible by 3, print 'hello', and print a blank space at the end.
def hello_1(x):
    """
    Prints 'hello' for every value from 0 to x-1 if the value is divisible by 3.
    """
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')  # Prints a blank space after the loop.

hello_1(12)


######################## 
# If the remainder of dividing by 5 is 3 or if dividing by 4 is 3, print 'hello'.
def hello_2(x):
    """
    Prints 'hello' if the number gives a remainder of 3 when divided by 5 or 4.
    """
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')  # Prints a blank space after the loop.

hello_2(12)


######################## 
# Prints 'hello' for every integer between the range of 3 to 17.
def hello_3(x, y):
    """
    Prints 'hello' for each integer between x (inclusive) and y (exclusive).
    """
    for i in range(x, y):
        print('hello')
    print(' ')  # Prints a blank space after the loop.

hello_3(3, 17)


######################## 
# While x is not equal to 15, print 'hello' then add 3 to x.
def hello_4(x):
    """
    Prints 'hello' repeatedly, incrementing x by 3 until x equals 15.
    """
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')  # Prints a blank space after the loop.

hello_4(0)


######################## 
# Prints 'hello' once when x == 18 and 'hello' 7 times when x == 31, won't print anything if x is below 31.
def hello_5(x):
    """
    Prints 'hello' based on specific values of x:
    - Once when x equals 18.
    - Seven times when x equals 31.
    """
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')  # Prints a blank space after the loop.

hello_5(12)


######################## 
# WHILE loop with BREAK: prints the string 'hello!' followed by a number until y == 6 is reached, if x is set as True.
def hello_6(x, y):
    """
    Prints 'hello!' followed by y incremented by 1 until y equals 6, then breaks the loop.
    """
    while x:  # while x is True
        print("hello! " + str(y))  # Prints 'hello!' followed by the current value of y.
        y += 1  # Increment y by 1.
        if y == 6:
            break  # Exit the loop when y equals 6.
    print(' ')  # Prints a blank space after the loop.

hello_6(True, 0)


**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********************************************************************

Code ran without errors

Time consumed = 0.02444s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
This program provides various mathematical utility functions, including:
- Calculating the square root of a number
- Finding the maximum of two numbers
- Sorting three numbers in ascending order
- Calculating the factorial of a number using different methods: 
  iteratively, recursively, and using a while loop.

Author: Sebastian Dohne  (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[cfexercises1.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"
# Imports

import sys  # module to interface our program with the operating system


def foo_1(x):
    """
    Calculates the square root of a given number.

    Parameters:
    x (float or int): The number to find the square root of.

    Returns:
    float: The square root of the number x.
    
    >>> foo_1(4)
    2.0
    >>> foo_1(9)
    3.0
    """
    return x ** 0.5

def foo_2(x, y):
    """
    Finds the larger of two numbers.

    Parameters:
    x (float or int): The first number.
    y (float or int): The second number.

    Returns:
    float or int: The larger of the two numbers x and y.
    
    >>> foo_2(5, 3)
    5
    >>> foo_2(2, 8)
    8
    >>> foo_2(7, 7)
    7
    """
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    """
    Sorts three numbers in ascending order.

    Parameters:
    x (float or int): The first number.
    y (float or int): The second number.
    z (float or int): The third number.

    Returns:
    list: A list of the three numbers sorted in ascending order.
    
    >>> foo_3(5, 3, 2)
    [2, 3, 5]
    >>> foo_3(1, 2, 3)
    [1, 2, 3]
    >>> foo_3(7, 5, 6)
    [5, 6, 7]
    """
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    if x > y:
        tmp = y
        y = x
        x = tmp
    return [x, y, z]

def foo_4(x):
    """
    Calculates the factorial of a number iteratively.

    Parameters:
    x (int): The number to calculate the factorial of.

    Returns:
    int: The factorial of the number x.
    
    >>> foo_4(5)
    120
    >>> foo_4(0)
    1
    >>> foo_4(3)
    6
    """
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x): 
    """
    Recursively calculates the factorial of a number.

    Parameters:
    x (int): The number to calculate the factorial of.

    Returns:
    int: The factorial of the number x.
    
    >>> foo_5(5)
    120
    >>> foo_5(0)
    1
    >>> foo_5(3)
    6
    """
    if x == 0:
        return 1
    return x * foo_5(x - 1)
     
def foo_6(x): 
    """
    Calculates the factorial of a number using a while loop.

    Parameters:
    x (int): The number to calculate the factorial of.

    Returns:
    int: The factorial of the number x.
    
    >>> foo_6(5)
    120
    >>> foo_6(0)
    1
    >>> foo_6(3)
    6
    """
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main():
    """
    Runs test cases for each function and prints results.
    """
    print("foo_1(9):", foo_1(9))               # Example square root calculation
    print("foo_2(5, 3):", foo_2(5, 3))         # Example max of two numbers
    print("foo_3(5, 3, 2):", foo_3(5, 3, 2))   # Example sorting of three numbers
    print("foo_4(5):", foo_4(5))               # Example factorial calculation (iterative)
    print("foo_5(5):", foo_5(5))               # Example factorial calculation (recursive)
    print("foo_6(5):", foo_6(5))               # Example factorial calculation (while loop)
    
    print("\nAll test cases executed.")


if __name__ == "__main__": 
    import doctest 
    doctest.testmod() #runs doctest automatically
    main()


**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
foo_1(9): 3.0
foo_2(5, 3): 5
foo_3(5, 3, 2): [2, 3, 5]
foo_4(5): 120
foo_5(5): 120
foo_6(5): 120

All test cases executed.

**********************************************************************

Code ran without errors

Time consumed = 0.06392s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates how to populate a dictionary that maps 
taxonomic order names to sets of taxa (species). It uses both conventional loops and 
list comprehensions to achieve this. The script prints the resulting dictionary to the screen.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[dictionary.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"


# List of tuples containing species and their taxonomic order
taxa = [
    ('Myotis lucifugus', 'Chiroptera'),
    ('Gerbillus henleyi', 'Rodentia'),
    ('Peromyscus crinitus', 'Rodentia'),
    ('Mus domesticus', 'Rodentia'),
    ('Cleithrionomys rutilus', 'Rodentia'),
    ('Microgale dobsoni', 'Afrosoricida'),
    ('Microgale talazaci', 'Afrosoricida'),
    ('Lyacon pictus', 'Carnivora'),
    ('Arctocephalus gazella', 'Carnivora'),
    ('Canis lupus', 'Carnivora')
]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

#### Your solution here #### 

taxa_dic = {}

for species, order in taxa:  # Loop iterates over every tuple and unpacks each into species and order 
    if order in taxa_dic: 
        taxa_dic[order].append(species)  # Appends species to order if present in dictionary
    else:
        taxa_dic[order] = [species]  # If not, then a new list of species is created
print(taxa_dic)


# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  

taxa_dicc = {order: [species for species, ord in taxa if ord == order] for species, order in taxa}
# The dictionary comprehension maps orders to species lists
print(taxa_dicc)

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': ['Myotis lucifugus'], 'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']}
{'Chiroptera': ['Myotis lucifugus'], 'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Carnivora': ['Lyacon pictus'
**********************************************************************

Code ran without errors

Time consumed = 0.02418s

======================================================================
Inspecting script file basic_cvs.py...

File contents are:

**********************************************************************
"""
Description: This script demonstrates how to read from and write to CSV files using the `csv` module in Python.
It includes:
- Reading data from a CSV file and printing species information.
- Writing specific columns (species name and body mass) from one CSV file to another.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""
__appname__ = '[basic.cvs.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

**********************************************************************

Testing basic_cvs.py...

basic_cvs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.03048s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script contains a function `buggyfunc` that attempts to 
perform division in a loop, catching errors such as division by zero. It demonstrates 
the use of try-except blocks for error handling in Python, and prints the progress 
and errors encountered during the execution of the function.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[debugme.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"


def buggyfunc(x):
    y = x
    for i in range(x):
        try: 
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work;{x = }; {y = }")
        else:
            print(f"OK; {x = }; {y = }, {z = };")
    return z

buggyfunc(20)

#ipdb in python : runs in debugging python shell 
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************
OK; x = 20; y = 19, z = 1.0526315789473684;
OK; x = 20; y = 18, z = 1.1111111111111112;
OK; x = 20; y = 17, z = 1.1764705882352942;
OK; x = 20; y = 16, z = 1.25;
OK; x = 20; y = 15, z = 1.3333333333333333;
OK; x = 20; y = 14, z = 1.4285714285714286;
OK; x = 20; y = 13, z = 1.5384615384615385;
OK; x = 20; y = 12, z = 1.6666666666666667;
OK; x = 20; y = 11, z = 1.8181818181818181;
OK; x = 20; y = 10, z = 2.0;
OK; x = 20; y = 9, z = 2.2222222222222223;
OK; x = 20; y = 8, z = 2.5;
OK; x = 20; y = 7, 
**********************************************************************

Code ran without errors

Time consumed = 0.02452s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates a simple function `foo` that multiplies 
a number by itself and prints the result. The script also includes instructions 
on how to run it using different Python interpreters in the terminal.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = '[MyExampleScript.py]'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

def foo(x):
    x *= x  # Multiply x by itself (same as x = x * x)
    print(x)  # Print the result of x*x

foo(2)  # Call the function foo with argument 2; should print 4

# You can run a Python script from the command line (bash) in several ways:

# Using Python 3:
# python3 MyExampleScript.py

# Using IPython 3:
# ipython3 MyExampleScript.py

# In an interactive IPython session, you can run scripts with the %run magic command:
# %run MyExampleScript.py


**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 92.5

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.02313s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description: This script demonstrates how the `__name__` variable works in Python.
It checks whether the script is being run directly or imported as a module and prints
an appropriate message based on that. It also displays the module's name.

Author: Sebastian Dohne (sed24@ic.ac.uk)
Version: 0.0.1
License: License for this code/program
"""

__appname__ = 'using_name.py'
__author__ = 'Sebastian Dohne (sed24@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

# Check if the script is being run directly or imported


if __name__ == '__main__':
    print('This program is being run by itself!') 
else:
    print('I am being imported from another script/program/module!')

print("This module's name is: " + __name__)

#doing: %run using_name.py
#This program is being run by itself!
#This module's name is: __main__

#doing import using_name
#I am being imported from another script/program/module!
#This module's name is: using_name


**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 92.5

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself!
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.02122s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 92.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!