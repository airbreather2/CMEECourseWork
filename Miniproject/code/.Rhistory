low_temp_data <- plot_data %>% filter(Temp >= 0 & Temp < 12)
medium_temp_data <- plot_data %>% filter(Temp >= 12 & Temp < 25)
high_temp_data <- plot_data %>% filter(Temp >= 25 & Temp <= 37)
# Function to add jitter for visual clarity
jitter_values <- function(x) {
ifelse(is.na(x), NA, x + runif(length(x), -0.03, 0.03))  # Add tiny noise to avoid stacking
}
# Apply jitter to AIC weights
low_temp_data <- low_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
medium_temp_data <- medium_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
high_temp_data <- high_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
# Load required libraries if not already loaded
library(ggplot2)
library(gridExtra)
library(cowplot)
# Function to plot violin plots for a given dataset (without individual legends)
plot_violin_graph <- function(dataframe, temp_range, show_y_axis = TRUE) {
p <- ggplot(dataframe, aes(x = model, y = AIC_weight_jittered, fill = model)) +
geom_violin(alpha = 0.7, width = 0.8, draw_quantiles = c(0.25, 0.5, 0.75)) +
labs(
title = temp_range,
x = NULL,
y = if(show_y_axis) "AIC Weight" else NULL
) +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_discrete(labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
theme_bw() +
theme(legend.position = "none")  # Remove individual legends
# Remove y-axis text and ticks for all but the leftmost plot
if (!show_y_axis) {
p <- p + theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
}
return(p)
}
# Generate individual plots - only first plot shows y-axis
low_plot <- plot_violin_graph(low_temp_data, "Low Temp: 0-12°C", show_y_axis = TRUE)
medium_plot <- plot_violin_graph(medium_temp_data, "Medium Temp: 12-25°C", show_y_axis = FALSE)
high_plot <- plot_violin_graph(high_temp_data, "High Temp: 25-37°C", show_y_axis = FALSE)
# Create a common legend
legend_plot <- ggplot(plot_data, aes(x = model, y = AIC_weight, fill = model)) +
geom_violin() +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz"),
name = "Model Type") +
theme(legend.position = "bottom")
# Extract the legend
legend <- get_legend(legend_plot)
# Combine plots horizontally with shared y-axis label and add the legend at the bottom
plots_row <- plot_grid(
low_plot, medium_plot, high_plot,
ncol = 3,
align = "h",
axis = "bt"
)
# Add the plots directly with the legend (no need for separate y-axis label)
plots_with_legend <- plot_grid(
plots_row,
legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
# Add an overall title
title <- ggdraw() +
draw_label("AIC Weight Distribution by Model and Temperature Range",
fontface = "bold", size = 14, x = 0.5, y = 0.5)
# Combine title and plots
final_plot <- plot_grid(
title, plots_with_legend,
ncol = 1,
rel_heights = c(0.1, 1)
)
# Save the plot with appropriate dimensions
ggsave("../output/aic_weight_violin_all_temps.png", plot = final_plot,
width = 12, height = 6, dpi = 300)  # Wider, shorter format
###############################################################################
# 7. Violin plot for Aikaike weight distribution across groups
###############################################################################
# filter for converged models
plot_data <- model_comparison %>% filter(convergence == TRUE)
# Create temperature range datasets
low_temp_data <- plot_data %>% filter(Temp >= 0 & Temp < 12)
medium_temp_data <- plot_data %>% filter(Temp >= 12 & Temp < 25)
high_temp_data <- plot_data %>% filter(Temp >= 25 & Temp <= 37)
# Function to add jitter for visual clarity
jitter_values <- function(x) {
ifelse(is.na(x), NA, x + runif(length(x), -0.03, 0.03))  # Add tiny noise to avoid stacking
}
# Apply jitter to AIC weights
low_temp_data <- low_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
medium_temp_data <- medium_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
high_temp_data <- high_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
# Load required libraries if not already loaded
library(ggplot2)
library(gridExtra)
library(cowplot)
# Function to plot violin plots for a given dataset (without individual legends)
plot_violin_graph <- function(dataframe, temp_range, show_y_axis = TRUE) {
p <- ggplot(dataframe, aes(x = model, y = AIC_weight_jittered, fill = model)) +
geom_violin(alpha = 0.7, width = 0.8, draw_quantiles = c(0.25, 0.5, 0.75)) +
labs(
title = temp_range,
x = NULL,
y = if(show_y_axis) "AIC Weight" else NULL
) +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_discrete(labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
theme_bw() +
theme(legend.position = "none")  # Remove individual legends
# Remove y-axis text and ticks for all but the leftmost plot
if (!show_y_axis) {
p <- p + theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
}
return(p)
}
# Generate individual plots - only first plot shows y-axis
low_plot <- plot_violin_graph(low_temp_data, "Low Temp: 0-12°C", show_y_axis = TRUE)
medium_plot <- plot_violin_graph(medium_temp_data, "Medium Temp: 12-25°C", show_y_axis = FALSE)
high_plot <- plot_violin_graph(high_temp_data, "High Temp: 25-37°C", show_y_axis = FALSE)
# Create a common legend
legend_plot <- ggplot(plot_data, aes(x = model, y = AIC_weight, fill = model)) +
geom_violin() +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz"),
name = "Model Type") +
theme(legend.position = "bottom")
# Extract the legend
legend <- get_legend(legend_plot)
# Combine plots horizontally with shared y-axis label and add the legend at the bottom
plots_row <- plot_grid(
low_plot, medium_plot, high_plot,
ncol = 3,
align = "h",
axis = "bt"
)
# Add the plots directly with the legend (no need for separate y-axis label)
plots_with_legend <- plot_grid(
plots_row,
legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
# Add an overall title with solid background
title <- ggdraw() +
draw_label("AIC Weight Distribution by Model and Temperature Range",
fontface = "bold", size = 14, x = 0.5, y = 0.5) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
# Combine title and plots
final_plot <- plot_grid(
title, plots_with_legend,
ncol = 1,
rel_heights = c(0.1, 1)
)
# Save the plot with appropriate dimensions and white background
ggsave("../output/aic_weight_violin_all_temps.png", plot = final_plot,
width = 12, height = 6, dpi = 300, bg = "white")  # Wider, shorter format
source("~/Documents/CMEEMiniproject/miniproject/code/model-validation.R")
###############################################################################
# 7. Violin plot for Aikaike weight distribution across groups
###############################################################################
# filter for converged models
plot_data <- model_comparison %>% filter(convergence == TRUE)
# Create temperature range datasets
low_temp_data <- plot_data %>% filter(Temp >= 0 & Temp < 12)
medium_temp_data <- plot_data %>% filter(Temp >= 12 & Temp < 25)
high_temp_data <- plot_data %>% filter(Temp >= 25 & Temp <= 37)
# Function to add jitter for visual clarity
jitter_values <- function(x) {
ifelse(is.na(x), NA, x + runif(length(x), -0.03, 0.03))  # Add tiny noise to avoid stacking, NA values are prevented
}
# Apply jitter to AIC weights
low_temp_data <- low_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
medium_temp_data <- medium_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
high_temp_data <- high_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
# Function to plot violin plots for a given dataset
plot_violin_graph <- function(dataframe, temp_range, show_y_axis = TRUE) {
p <- ggplot(dataframe, aes(x = model, y = AIC_weight_jittered, fill = model)) + #plot data
geom_violin(alpha = 0.7, width = 0.8, draw_quantiles = c(0.25, 0.5, 0.75)) + #add quantile
labs(
title = temp_range, #define axes
x = NULL,
y = if(show_y_axis) "AICc Weight" else NULL
) +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"), #select colours
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
scale_y_continuous(limits = c(0, 1)) + #set range from 0-1 (Aikaike weights are probabilities)
scale_x_discrete(labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) + #format x-axis labels
theme_bw() +
theme(legend.position = "none")  # Remove individual legends
# Remove y-axis text and ticks for all but the leftmost plot
if (!show_y_axis) {
p <- p + theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
}
return(p)
}
# Generate individual plots - only first plot shows y-axis
low_plot <- plot_violin_graph(low_temp_data, "Low Temp: 0-12°C", show_y_axis = TRUE)
medium_plot <- plot_violin_graph(medium_temp_data, "Medium Temp: 12-25°C", show_y_axis = FALSE)
high_plot <- plot_violin_graph(high_temp_data, "High Temp: 25-37°C", show_y_axis = FALSE)
# Create a common legend, apply colours to curves and place it at bottom
legend_plot <- ggplot(plot_data, aes(x = model, y = AIC_weight, fill = model)) +
geom_violin() +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz"),
name = "Model Type") +
theme(legend.position = "bottom")
# Extract the legend
legend <- get_legend(legend_plot)
# Combine plots horizontally with shared y-axis label and add the legend at the bottom
plots_row <- plot_grid(
low_plot, medium_plot, high_plot,
ncol = 3,
align = "h",
axis = "bt"
)
# Add the plots directly with the legend
plots_with_legend <- plot_grid(
plots_row,
legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
# Add an overall title with background
title <- ggdraw() +
draw_label("AICc Weight Distribution by Model and Temperature Range",
fontface = "bold", size = 14, x = 0.5, y = 0.5) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
# Combine title and plots
final_plot <- plot_grid(
title, plots_with_legend,
ncol = 1,
rel_heights = c(0.1, 1)
)
# Save the plot with appropriate dimensions and white background
ggsave("../output/aic_weight_violin_all_temps.png", plot = final_plot,
width = 12, height = 6, dpi = 300, bg = "white")  # Wider, shorter format
###############################################################################
# 7. Violin plot for Aikaike weight distribution across groups
###############################################################################
# filter for converged models
plot_data <- model_comparison %>% filter(convergence == TRUE)
# Create temperature range datasets
low_temp_data <- plot_data %>% filter(Temp >= 0 & Temp < 12)
medium_temp_data <- plot_data %>% filter(Temp >= 12 & Temp < 25)
high_temp_data <- plot_data %>% filter(Temp >= 25 & Temp <= 37)
# Function to add jitter for visual clarity
jitter_values <- function(x) {
ifelse(is.na(x), NA, x + runif(length(x), -0.03, 0.03))  # Add tiny noise to avoid stacking, NA values are prevented
}
# Apply jitter to AIC weights
low_temp_data <- low_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
medium_temp_data <- medium_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
high_temp_data <- high_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
# Function to plot violin plots for a given dataset
plot_violin_graph <- function(dataframe, temp_range, show_y_axis = TRUE) {
p <- ggplot(dataframe, aes(x = model, y = AIC_weight_jittered, fill = model)) + #plot data
geom_violin(alpha = 0.7, width = 0.8, draw_quantiles = c(0.25, 0.5, 0.75)) + #add quantile
labs(
title = temp_range, #define axes
x = NULL,
y = if(show_y_axis) "AICc Weight" else NULL
) +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"), #select colours
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
scale_y_continuous(limits = c(0, 1)) + #set range from 0-1 (Aikaike weights are probabilities)
scale_x_discrete(labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) + #format x-axis labels
theme_bw() +
theme(legend.position = "none")  # Remove individual legends
# Remove y-axis text and ticks for all but the leftmost plot
if (!show_y_axis) {
p <- p + theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
}
return(p)
}
# Generate individual plots - only first plot shows y-axis
low_plot <- plot_violin_graph(low_temp_data, "Low Temp: 0-12°C", show_y_axis = TRUE)
medium_plot <- plot_violin_graph(medium_temp_data, "Medium Temp: 12-25°C", show_y_axis = FALSE)
high_plot <- plot_violin_graph(high_temp_data, "High Temp: 25-37°C", show_y_axis = FALSE)
# Create a common legend, apply colours to curves and place it at bottom
legend_plot <- ggplot(plot_data, aes(x = model, y = AIC_weight, fill = model)) +
geom_violin() +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz"),
name = "Model Type") +
theme(legend.position = "bottom")
# Extract the legend
legend <- get_legend(legend_plot)
# Combine plots horizontally with shared y-axis label and add the legend at the bottom
plots_row <- plot_grid(
low_plot, medium_plot, high_plot,
ncol = 3,
align = "h",
axis = "bt"
)
# Add the plots directly with the legend
plots_with_legend <- plot_grid(
plots_row,
legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
# Add an overall title with background
title <- ggdraw() +
draw_label("AICc Weight Distribution by Model and Temperature Range",
fontface = "bold", size = 14, x = 0.5, y = 0.5) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
# Combine title and plots
final_plot <- plot_grid(
title, plots_with_legend,
ncol = 1,
rel_heights = c(0.1, 1)
)
# Save the plot with appropriate dimensions and white background
ggsave("../output/aic_weight_violin_all_temps.png", plot = final_plot,
width = 12, height = 6, dpi = 300, bg = "white")  # Wider, shorter format
###############################################################################
# 7. Violin plot for Aikaike weight distribution across groups
###############################################################################
# filter for converged models
plot_data <- model_comparison %>% filter(convergence == TRUE)
# Create temperature range datasets
low_temp_data <- plot_data %>% filter(Temp >= 0 & Temp < 12)
medium_temp_data <- plot_data %>% filter(Temp >= 12 & Temp < 25)
high_temp_data <- plot_data %>% filter(Temp >= 25 & Temp <= 37)
# Function to add jitter for visual clarity
jitter_values <- function(x) {
ifelse(is.na(x), NA, x + runif(length(x), -0.02, 0.02))  # Add tiny noise to avoid stacking, NA values are prevented
}
# Apply jitter to AIC weights
low_temp_data <- low_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
medium_temp_data <- medium_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
high_temp_data <- high_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
# Function to plot violin plots for a given dataset
plot_violin_graph <- function(dataframe, temp_range, show_y_axis = TRUE) {
p <- ggplot(dataframe, aes(x = model, y = AIC_weight_jittered, fill = model)) + #plot data
geom_violin(alpha = 0.7, width = 0.8, draw_quantiles = c(0.25, 0.5, 0.75)) + #add quantile
labs(
title = temp_range, #define axes
x = NULL,
y = if(show_y_axis) "AICc Weight" else NULL
) +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"), #select colours
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
scale_y_continuous(limits = c(0, 1)) + #set range from 0-1 (Aikaike weights are probabilities)
scale_x_discrete(labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) + #format x-axis labels
theme_bw() +
theme(legend.position = "none")  # Remove individual legends
# Remove y-axis text and ticks for all but the leftmost plot
if (!show_y_axis) {
p <- p + theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
}
return(p)
}
# Generate individual plots - only first plot shows y-axis
low_plot <- plot_violin_graph(low_temp_data, "Low Temp: 0-12°C", show_y_axis = TRUE)
medium_plot <- plot_violin_graph(medium_temp_data, "Medium Temp: 12-25°C", show_y_axis = FALSE)
high_plot <- plot_violin_graph(high_temp_data, "High Temp: 25-37°C", show_y_axis = FALSE)
# Create a common legend, apply colours to curves and place it at bottom
legend_plot <- ggplot(plot_data, aes(x = model, y = AIC_weight, fill = model)) +
geom_violin() +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz"),
name = "Model Type") +
theme(legend.position = "bottom")
# Extract the legend
legend <- get_legend(legend_plot)
# Combine plots horizontally with shared y-axis label and add the legend at the bottom
plots_row <- plot_grid(
low_plot, medium_plot, high_plot,
ncol = 3,
align = "h",
axis = "bt"
)
# Add the plots directly with the legend
plots_with_legend <- plot_grid(
plots_row,
legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
# Add an overall title with background
title <- ggdraw() +
draw_label("AICc Weight Distribution by Model and Temperature Range",
fontface = "bold", size = 14, x = 0.5, y = 0.5) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
# Combine title and plots
final_plot <- plot_grid(
title, plots_with_legend,
ncol = 1,
rel_heights = c(0.1, 1)
)
# Save the plot with appropriate dimensions and white background
ggsave("../output/aic_weight_violin_all_temps.png", plot = final_plot,
width = 12, height = 6, dpi = 300, bg = "white")  # Wider, shorter format
###############################################################################
# 7. Violin plot for Aikaike weight distribution across groups
###############################################################################
# filter for converged models
plot_data <- model_comparison %>% filter(convergence == TRUE)
# Create temperature range datasets
low_temp_data <- plot_data %>% filter(Temp >= 0 & Temp < 12)
medium_temp_data <- plot_data %>% filter(Temp >= 12 & Temp < 25)
high_temp_data <- plot_data %>% filter(Temp >= 25 & Temp <= 37)
# Function to add jitter for visual clarity
jitter_values <- function(x) {
ifelse(is.na(x), NA, x + runif(length(x), -0.025, 0.025))  # Add tiny noise to avoid stacking, NA values are prevented
}
# Apply jitter to AIC weights
low_temp_data <- low_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
medium_temp_data <- medium_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
high_temp_data <- high_temp_data %>% mutate(AIC_weight_jittered = jitter_values(AIC_weight))
# Function to plot violin plots for a given dataset
plot_violin_graph <- function(dataframe, temp_range, show_y_axis = TRUE) {
p <- ggplot(dataframe, aes(x = model, y = AIC_weight_jittered, fill = model)) + #plot data
geom_violin(alpha = 0.7, width = 0.8, draw_quantiles = c(0.25, 0.5, 0.75)) + #add quantile
labs(
title = temp_range, #define axes
x = NULL,
y = if(show_y_axis) "AICc Weight" else NULL
) +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"), #select colours
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) +
scale_y_continuous(limits = c(0, 1)) + #set range from 0-1 (Aikaike weights are probabilities)
scale_x_discrete(labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz")) + #format x-axis labels
theme_bw() +
theme(legend.position = "none")  # Remove individual legends
# Remove y-axis text and ticks for all but the leftmost plot
if (!show_y_axis) {
p <- p + theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
}
return(p)
}
# Generate individual plots - only first plot shows y-axis
low_plot <- plot_violin_graph(low_temp_data, "Low Temp: 0-12°C", show_y_axis = TRUE)
medium_plot <- plot_violin_graph(medium_temp_data, "Medium Temp: 12-25°C", show_y_axis = FALSE)
high_plot <- plot_violin_graph(high_temp_data, "High Temp: 25-37°C", show_y_axis = FALSE)
# Create a common legend, apply colours to curves and place it at bottom
legend_plot <- ggplot(plot_data, aes(x = model, y = AIC_weight, fill = model)) +
geom_violin() +
scale_fill_manual(values = c("cubic" = "blue", "logistic" = "red", "gompertz" = "green"),
labels = c("cubic" = "Cubic", "logistic" = "Logistic", "gompertz" = "Gompertz"),
name = "Model Type") +
theme(legend.position = "bottom")
# Extract the legend
legend <- get_legend(legend_plot)
# Combine plots horizontally with shared y-axis label and add the legend at the bottom
plots_row <- plot_grid(
low_plot, medium_plot, high_plot,
ncol = 3,
align = "h",
axis = "bt"
)
# Add the plots directly with the legend
plots_with_legend <- plot_grid(
plots_row,
legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
# Add an overall title with background
title <- ggdraw() +
draw_label("AICc Weight Distribution by Model and Temperature Range",
fontface = "bold", size = 14, x = 0.5, y = 0.5) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
# Combine title and plots
final_plot <- plot_grid(
title, plots_with_legend,
ncol = 1,
rel_heights = c(0.1, 1)
)
# Save the plot with appropriate dimensions and white background
ggsave("../output/aic_weight_violin_all_temps.png", plot = final_plot,
width = 12, height = 6, dpi = 300, bg = "white")  # Wider, shorter format
# Save the plot with appropriate dimensions and white background
ggsave("../output/AICc_weight_violin.png", plot = final_plot,
width = 12, height = 6, dpi = 300, bg = "white")  # Wider, shorter format
